
application.onAppStart = function()
{

}

application.onStatus = function(info)
{
	trace( info.code + " " + info.description );
}

application.onConnect = function(newClient,name,passwd)
{
	trace("Inside onConnect()");
	i = 0;

	newClient.createFileObj = function(name)
	{
		trace("Creating file object " + name );
		this.myFile = new File(name);

		if ( this.myFile != null )
			return this.myFile.toString();
		else
			return "Failed";
	}
	
	newClient.openFile = function( type, mode)
	{
		trace("Opening file " + this.name );
		if (this.myFile.open(type, mode))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	newClient.readLn = function()
	{
		if ( !this.myFile.eof() )
			return this.myFile.readln();
		return "EOF";
	}
	newClient.readAll = function()
	{
		if ( !this.myFile.eof() )
			return this.myFile.readAll();
		return "EOF";
	}
	newClient.read = function(num)
	{
		if ( !this.myFile.eof() )
			return this.myFile.read(num);
		return "EOF";
	}
	newClient.readByte = function()
	{
		if ( !this.myFile.eof() )
			return this.myFile.readByte();
		return "EOF";
	}

	newClient.write = function(a1,a2)
	{
		return this.myFile.write(a1, a2);
	}
	newClient.writeln = function(a1,a2)
	{
		return this.myFile.writeln(a1, a2);
	}

	newClient.writeAll = function(a1)
	{
		return this.myFile.writeAll(a1);
	}


	newClient.writeByte = function(ch)
	{
		return this.myFile.writeln(ch);
	}

	newClient.setPosition = function(pos)
	{
		return this.myFile.position = pos;
	}

	newClient.eof = function()
	{
		return this.myFile.eof();
	}
	newClient.flush = function()
	{
		return this.myFile.flush();
	}

	function filter(name)
	{
		if ( name.lastIndexOf( ".flv") != -1 || name.lastIndexOf(".mp3") != -1){
            return true;
		}
			return false;
	}

 


	newClient.dir = function()
	{
		trace("newclient.dir is working");
		//set dirList to a the array with a filter attached
		var dirList = this.myFile.list(filter);
		//set tmp to an array
		var tmp = new Array();
		//for length of dirList
		for( var i = 0; i < dirList.length; i++)
		{
			var index = dirList[i].name.lastIndexOf(".");
			var stream_name = dirList[i].name.substring(index + 1, dirList[i].name.length) + ":" + dirList[i].name.substring(0, index);

			trace("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! " + stream_name);
			dirList[i].streamlength = Stream.length(stream_name);

			//set Obj to each 
			var Obj = dirList[i];
			for ( var j in Obj )
			{
				trace(  j + "=" + Obj[j] );
			}

			trace( dirList[i].name);
			//var o = {}
			//o.name = dirList[i].name;
			//tmp.push(o);

		}

		return dirList;

	}
	newClient.mkdir = function(dirName)
	{
		return this.myFile.mkdir(dirName);
	}
	newClient.remove = function()
	{
		return this.myFile.remove();
	}
	newClient.rename = function(newName)
	{
		return this.myFile.renameTo(newName);
	}
	newClient.copy = function(cpName)
	{
		return this.myFile.copyTo(cpName);
	}

	
	newClient.closeFile = function()
	{
		trace("Closing file ");
		return this.myFile.close();
	}
	
	newClient.getPosition = function()
	{
		trace("Returning file pos " + this.myFile.position);
		return this.myFile.position;
	}
	
	newClient.dumpProps = function()
	{

		var o = {}
		for ( var i in this.myFile )
		{
			o[i] = this.myFile[i];
			trace(  i + " " + this.myFile[i] );
		}
		return o;
	}
	newClient.loadScript = function(scr)
	{

		this.myFile = new File(scr);

		if ( this.myFile != null ){
			load( this.myFile);
			return "Success";
		}
		else
			return "Failed";
	}
	return true;
}


Client.prototype.getStreamLength = function(p_streamName) {
	trace("Stream.length: " + p_streamName + ", " + Stream.length(p_streamName));
	return Stream.length(p_streamName);
}
