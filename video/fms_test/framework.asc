/**
 * Copyright © 2002 Macromedia, Inc. All rights reserved.   
 * 
 * framework.asc 
 * Moving or modifying this file may affect the applications installed on this server. 
 */

try { var dummy = gFrameworkFC; } catch ( e ) { // #ifndef gFrameworkFC

	// Create the global framework object singleton. This will
	// serve as a place to hold various global framework objects
	gFrameworkFC = new Object();	// 
	
	// A utility routine to convert an object into an array
	// USE WITH CARE! In general it is only meant to be used
	// for converting arguments into a real array so concat()
	// works properly.
	gFrameworkFC.__toarray__ = function(obj) {
		if ( typeof(obj) != "object" || obj.constructor == Array || obj["length"] == null )
			return obj;

		var a = new Array(obj.length)
		for ( var i = 0; i < obj.length; i++ )
			a[i] = obj[i];

		return a;
	}

	////////////////////////////////
	// Load all core framework files
	
	load( "application.asc" );	// Load the ApplicationWrapper
	load( "facade.asc" );		// Load the component facade
	
	// The next available client id.
	gFrameworkFC.nextClientID = 0;
	
	// Setup a 'per client global storage' area so that different components
	// can share per client data without having to attach it to the client
	// object.
	gFrameworkFC.clientGlobals = new Object();
	
	// Accessor for client globals
	gFrameworkFC.getClientGlobals = function(client) {
		return this.clientGlobals[client.__ID__];
	}
	
	// A component is available only if its constructor function
	// is registered here. For e.g. consider a chat component called
	// FCChat, then gFrameworkFC.components["FCChat"] == FCChat.
	gFrameworkFC.components = new Object();

	// Register a component
	gFrameworkFC.registerComponent = function(name, componentClass) {
		gFrameworkFC.components[name] = componentClass;
		
		// Setup ourselves as a listener on the actual app object
		gFrameworkFC.application.addListener( componentClass );
		componentClass.onAppStop = function() {
			var result = true;
			if ( this.instances != null )
				for (var i in this.instances)
					if ( this.instances[i]["onAppStop"] != null ) {
						var result1 = this.instances[i].onAppStop();
						if ( result1 != null )
							result = result && result1;
					}
			return result;
		}
		componentClass.onDisconnect = function(client) {
			if ( this.instances != null )
				for ( var i in this.instances )
					if ( this.instances[i]["onDisconnect"] != null )
						this.instances[i].onDisconnect(client);
		}
	}
	
	trace( "Communication Framework loaded successfully." );

} // #endif
