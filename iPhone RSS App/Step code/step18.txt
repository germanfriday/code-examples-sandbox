// in RSSXMLParser.m //- (void)parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName attributes:(NSDictionary *)attributeDict {	if ([elementName isEqualToString:@"item"]) {		// allocate and initialise a new News Item		currentNewsItem = [[NewsItem alloc] init];	}	else if ([elementName isEqualToString:@"title"] ||			 [elementName isEqualToString:@"description"] ||			 [elementName isEqualToString:@"link"])) {		// initialise the current string to receive text		theCurrentString = [NSMutableString string];	}	else {		theCurrentString = nil;	}}- (void)parser:(NSXMLParser *)parser foundCharacters:(NSString *)string {	if (theCurrentString != nil) {		[theCurrentString appendString:string];	}}- (void)parser:(NSXMLParser *)parser didEndElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName {	if ([elementName isEqualToString:@"item"]) {		// add it to our mutable array which represents our database		[newsArray addObject:currentNewsItem];		// we can release the old one as the mutable array will hold a reference to the old file		[currentNewsItem release];	}	else if ([elementName isEqualToString:@"title"]) {		currentNewsItem.title = [NSString stringWithString:theCurrentString];	}	else if ([elementName isEqualToString:@"description"]) {		currentNewsItem.description = [NSString stringWithString:theCurrentString];	}	else if ([elementName isEqualToString:@"link"]) {		currentNewsItem.link = [NSURL URLWithString:theCurrentString];	}}
